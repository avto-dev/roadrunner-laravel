#!/usr/bin/env php
<?php

declare(strict_types = 1);

ini_set('display_errors', 'stderr');

/**
 * Load autoloader.
 *
 * @return bool
 */
$autoload = function (): bool {
    static $auto_loads = [
        __DIR__ . '/vendor/autoload.php',
        __DIR__ . '/../vendor/autoload.php',
        __DIR__ . '/../../vendor/autoload.php',
        __DIR__ . '/../autoload.php',
        __DIR__ . '/../../autoload.php',
        __DIR__ . '/../../../autoload.php',
    ];

    foreach ($auto_loads as $autoload_file) {
        if (\is_file($autoload_file)) {
            require $autoload_file;

            return true;
        }
    }

    return false;
};

if ($autoload() !== true) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );

    die(1);
}

/**
 * Get worker class.
 *
 * @param string $default
 *
 * @return string
 */
$getWorkerClass = function (string $default = AvtoDev\RoadRunnerLaravel\Worker\Worker::class): string {
    $custom_class = getenv('RR_WORKER_CLASS');

    return is_string($custom_class) && class_exists($custom_class)
        ? $custom_class
        : $default;
};

global $argv;

$worker_class = $getWorkerClass();

unset($autoload, $getWorkerClass);

/** @var AvtoDev\RoadRunnerLaravel\Worker\WorkerInterface $worker */
$worker = new $worker_class($argv, null);
$worker->start();
